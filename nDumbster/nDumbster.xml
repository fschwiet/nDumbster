<?xml version="1.0"?>
<doc>
    <assembly>
        <name>nDumbster</name>
    </assembly>
    <members>
        <member name="T:nDumbster.smtp.SmtpMessage">
            <summary>
            Container for a complete SMTP message - headers and message body.
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpMessage.DEFAULT_CRLF">
            <summary>
            Default carriage return code is CRLF.
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpMessage.headers">
            <summary>
            Headers: Collection of named values.
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpMessage.body">
            <summary>
            Message body.
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpMessage.bodyLineCount">
            <summary>
            Number of lines in body
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpMessage.CR">
            <summary>
            Code used for carriage return in the body.
            </summary>
        </member>
        <member name="M:nDumbster.smtp.SmtpMessage.#ctor">
            <summary>
            Constructor. Initializes headers collection and body buffer.
            </summary>
        </member>
        <member name="M:nDumbster.smtp.SmtpMessage.Store(nDumbster.smtp.SmtpResponse,System.String)">
            <summary> 
            Update the headers or body depending on the SmtpResponse object and line of input.
            </summary>
            <param name="response">SmtpResponse object</param>
            <param name="commandData">remainder of input line after SMTP command has been removed</param>
        </member>
        <member name="M:nDumbster.smtp.SmtpMessage.ToString">
            <summary>
            String representation of the SmtpMessage.
            </summary>
            <returns>A String that displays the current SmtpMessage headers and body</returns>
        </member>
        <member name="P:nDumbster.smtp.SmtpMessage.Body">
            <summary>
            Message body.
            </summary>
        </member>
        <member name="P:nDumbster.smtp.SmtpMessage.BodyLineCount">
            <summary>
            Number of lines in message body.
            </summary>
        </member>
        <member name="P:nDumbster.smtp.SmtpMessage.Headers">
            <summary>
            Headers of the message.
            </summary>
        </member>
        <member name="T:nDumbster.smtp.SimpleSmtpServer">
             <summary>
             Dummy SMTP server for testing purposes.
             </summary>
             <example>
             The following examples shows how to use nDumbster and <see href="http://www.nunit.org">NUnit</see> to test your function sendMessage.
             <code>
            	[TestFixture]
            	public class SimpleSmtpServerTest
            	{
            		SimpleSmtpServer smtpServer;
            
            		[SetUp]
            		public void Setup()
            		{
            
            			smtpServer = SimpleSmtpServer.Start();
            
            		}
            
            		[TearDown]
            		public void TearDown()
            		{
            			smtpServer.Stop();
            		}
            
            		[Test]
            		public void SendEmail()
            		{
            			/// Use you own code 
            			sendMessage(25, "sender@here.com", "Test", "Test Body", "receiver@there.com");
            			Assert.AreEqual(1, smtpServer.ReceivedEmailCount, "1 mails sent");
            			SmtpMessage mail= (SmtpMessage)smtpServer.ReceivedEmail[0];
            			Assert.AreEqual("&lt;receiver@there.com&gt;", mail.Headers["To"], "Receiver");
            			Assert.AreEqual("&lt;sender@here.com&gt;", mail.Headers["From"], "Sender");
            			Assert.AreEqual("Test", mail.Headers["Subject"], "Subject");
            
            			Assert.AreEqual("Test Body", mailUser.Body, "Body");
            		}
            	}
            	</code>
             </example>
             <threadsafety static="true" instance="true">
            	<para>The server create a thread to handle message reception and all access to messages list is protected.</para>
             </threadsafety>
        </member>
        <member name="F:nDumbster.smtp.SimpleSmtpServer.DEFAULT_SMTP_PORT">
            <summary>
            Default SMTP port is 25.
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SimpleSmtpServer.port">
            <summary>
            Stores the port that the SmtpServer listens to
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SimpleSmtpServer.receivedMail">
            <summary>
            Stores all of the email received since this instance started up.
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SimpleSmtpServer.stopped">
            <summary>
            Indicates whether this server is stopped or not.
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SimpleSmtpServer.tcpListener">
            <summary>
            Listen for client connection
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SimpleSmtpServer.startedEvent">
            <summary>
            Synchronization <see cref="T:System.Threading.AutoResetEvent">event</see> : Set when server has started (successfully or not)
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SimpleSmtpServer.mainThreadException">
            <summary>
            Last <see cref="T:System.Exception">Exception</see> that happened in main loop thread
            </summary>
        </member>
        <member name="M:nDumbster.smtp.SimpleSmtpServer.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:nDumbster.smtp.SimpleSmtpServer.ClearReceivedEmail">
            <summary>
            Erase list of received emails
            </summary>
        </member>
        <member name="M:nDumbster.smtp.SimpleSmtpServer.Run">
            <summary>
            Main loop of the SMTP server.
            </summary>
        </member>
        <member name="M:nDumbster.smtp.SimpleSmtpServer.HandleSmtpTransaction(System.IO.StreamWriter,System.IO.StreamReader)">
            <summary>
            Handle an SMTP transaction, i.e. all activity between initial connect and QUIT command.
            </summary>
            <param name="output">output stream</param>
            <param name="input">input stream</param>
            <returns>List of received SmtpMessages</returns>
        </member>
        <member name="M:nDumbster.smtp.SimpleSmtpServer.SendResponse(System.IO.StreamWriter,nDumbster.smtp.SmtpResponse)">
            <summary>
            Send response to client.
            </summary>
            <param name="output">socket output stream</param>
            <param name="smtpResponse">Response to send</param>
        </member>
        <member name="M:nDumbster.smtp.SimpleSmtpServer.Stop">
            <summary>
            Forces the server to stop after processing the current request.
            </summary>
        </member>
        <member name="P:nDumbster.smtp.SimpleSmtpServer.Stopped">
            <summary>
            Indicates whether this server is stopped or not.
            </summary>
            <value><see langword="true"/> if the server is stopped</value>
        </member>
        <member name="P:nDumbster.smtp.SimpleSmtpServer.Port">
            <summary>
            The port that the SmtpServer listens to
            </summary>
            <value>Port used to accept client connections</value>
        </member>
        <member name="P:nDumbster.smtp.SimpleSmtpServer.ReceivedEmail">
            <summary>
            List of email received by this instance since start up.
            </summary>
            <value><see cref="T:System.Array">Array</see> holding received <see cref="T:nDumbster.smtp.SmtpMessage">SmtpMessage</see></value>
        </member>
        <member name="P:nDumbster.smtp.SimpleSmtpServer.ReceivedEmailCount">
            <summary>
            Number of messages received by this instance since start up.
            </summary>
            <value>Number of messages</value>
        </member>
        <member name="T:nDumbster.smtp.SmtpResponse">
            <summary>
            SMTP response container.
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpResponse.code">
            <summary>
            Response code - see RFC-2821. 
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpResponse.message">
            <summary>
            Response message. 
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpResponse.nextState">
            <summary>
            New state of the SMTP server once the request has been executed. 
            </summary>
        </member>
        <member name="M:nDumbster.smtp.SmtpResponse.#ctor(System.Int32,System.String,nDumbster.smtp.SmtpState)">
            <summary>
            Constructor.
            </summary>
            <param name="code">response code</param>
            <param name="message">response message</param>
            <param name="next">next state of the SMTP server</param>
        </member>
        <member name="P:nDumbster.smtp.SmtpResponse.Code">
            <summary> 
            Response code.
            </summary>
        </member>
        <member name="P:nDumbster.smtp.SmtpResponse.Message">
            <summary> 
            Response message.
            </summary>
        </member>
        <member name="P:nDumbster.smtp.SmtpResponse.NextState">
            <summary>
            Next SMTP server state.
            </summary>
        </member>
        <member name="T:nDumbster.smtp.SmtpActionType">
            <summary> Represents an SMTP action or command.</summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpActionType.CONNECT_BYTE">
            <summary>
            Internal representation of the CONNECT action.
             </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpActionType.EHLO_BYTE">
            <summary>
            Internal representation of the EHLO action. 
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpActionType.MAIL_BYTE">
            <summary>
            Internal representation of the MAIL FROM action. 
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpActionType.RCPT_BYTE">
            <summary>
            Internal representation of the RCPT action.
             </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpActionType.DATA_BYTE">
            <summary>
            Internal representation of the DATA action.
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpActionType.DATA_END_BYTE">
            <summary>
            Internal representation of the DATA END (.) action.
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpActionType.QUIT_BYTE">
            <summary>Internal representation of the QUIT action. </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpActionType.UNREC_BYTE">
            <summary>
            Internal representation of an unrecognized action: body text gets this action type.
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpActionType.BLANK_LINE_BYTE">
            <summary>
            Internal representation of the blank line action: separates headers and body text.
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpActionType.RSET_BYTE">
            <summary>
            Internal representation of the stateless RSET action.
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpActionType.VRFY_BYTE">
            <summary>
            Internal representation of the stateless VRFY action.
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpActionType.EXPN_BYTE">
            <summary>
            Internal representation of the stateless EXPN action.
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpActionType.HELP_BYTE">
            <summary>
            Internal representation of the stateless HELP action.
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpActionType.NOOP_BYTE">
            <summary>
            Internal representation of the stateless NOOP action.
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpActionType.action">
            <summary>
            Internal value for the action type.
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpActionType.CONNECT">
            <summary>
            CONNECT action.
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpActionType.EHLO">
            <summary>
            EHLO action.
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpActionType.MAIL">
            <summary>
            MAIL action.
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpActionType.RCPT">
            <summary>
            RCPT action.
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpActionType.DATA">
            <summary>
            DATA action.
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpActionType.DATA_END">
            <summary>
            "." action.
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpActionType.UNRECOG">
            <summary>
            Body text action.
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpActionType.QUIT">
            <summary>
            QUIT action.
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpActionType.BLANK_LINE">
            <summary>
            Header/body separator action.
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpActionType.RSET">
            <summary>
            Stateless RSET action.
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpActionType.VRFY">
            <summary>
            Stateless VRFY action. 
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpActionType.EXPN">
            <summary>
            Stateless EXPN action. 
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpActionType.HELP">
            <summary>
            Stateless HELP action. 
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpActionType.NOOP">
            <summary>
            Stateless NOOP action. 
            </summary>
        </member>
        <member name="M:nDumbster.smtp.SmtpActionType.#ctor(System.SByte)">
            <summary>
            Create a new SMTP action type. Private to ensure no invalid values.
            </summary>
            <param name="action">one of the _BYTE values</param>
        </member>
        <member name="M:nDumbster.smtp.SmtpActionType.ToString">
            <summary> 
            String representation of this SMTP action type.
            </summary>
            <returns>A String that represents the current SmtpActionType</returns>
            
        </member>
        <member name="P:nDumbster.smtp.SmtpActionType.Stateless">
            <summary>
            Indicates whether the action is stateless or not.
            </summary>
        </member>
        <member name="T:nDumbster.smtp.SmtpState">
            <summary> 
            SMTP server state.
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpState.CONNECT_BYTE">
            <summary>Internal representation of the CONNECT state. </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpState.GREET_BYTE">
            <summary>Internal representation of the GREET state. </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpState.MAIL_BYTE">
            <summary>Internal representation of the MAIL state. </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpState.RCPT_BYTE">
            <summary>Internal representation of the RCPT state. </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpState.DATA_HEADER_BYTE">
            <summary>Internal representation of the DATA_HEADER state. </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpState.DATA_BODY_BYTE">
            <summary>Internal representation of the DATA_BODY state. </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpState.QUIT_BYTE">
            <summary>Internal representation of the QUIT state. </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpState.state">
            <summary>Internal representation of the state. </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpState.CONNECT">
            <summary>CONNECT state: waiting for a client connection. </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpState.GREET">
            <summary>GREET state: wating for a ELHO message. </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpState.MAIL">
            <summary>MAIL state: waiting for the MAIL FROM: command. </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpState.RCPT">
            <summary>RCPT state: waiting for a RCPT &lt;email address&gt; command. </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpState.DATA_HDR">
            <summary>Waiting for headers. </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpState.DATA_BODY">
            <summary>Processing body text. </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpState.QUIT">
            <summary>End of client transmission. </summary>
        </member>
        <member name="M:nDumbster.smtp.SmtpState.#ctor(System.SByte)">
            <summary>
            Create a new SmtpState object. Private to ensure that only valid states can be created.
            </summary>
            <param name="state">one of the _BYTE values.</param>
        </member>
        <member name="M:nDumbster.smtp.SmtpState.ToString">
            <summary>
            String representation of this SmtpState.
            </summary>
            <returns>A String that represents the current SmtpState</returns>
        </member>
        <member name="T:nDumbster.smtp.SmtpRequest">
            <summary>
            Contains an SMTP client request and handles state transitions.
            </summary>
            <remarks>
            State transitions are handled using the following state transition table.
            <code>
            -----------+-------------------------------------------------------------------------------------------------
            |                                 State
            Action     +-------------+-----------+-----------+--------------+---------------+---------------+------------
            		   | CONNECT     | GREET     | MAIL      | RCPT         | DATA_HDR      | DATA_BODY     | QUIT
            -----------+-------------+-----------+-----------+--------------+---------------+---------------+------------
            connect    | 220/GREET   | 503/GREET | 503/MAIL  | 503/RCPT     | 503/DATA_HDR  | 503/DATA_BODY | 503/QUIT
            ehlo       | 503/CONNECT | 250/MAIL  | 503/MAIL  | 503/RCPT     | 503/DATA_HDR  | 503/DATA_BODY | 503/QUIT
            mail       | 503/CONNECT | 503/GREET | 250/RCPT  | 503/RCPT     | 503/DATA_HDR  | 503/DATA_BODY | 250/RCPT
            rcpt       | 503/CONNECT | 503/GREET | 503/MAIL  | 250/RCPT     | 503/DATA_HDR  | 503/DATA_BODY | 503/QUIT
            data       | 503/CONNECT | 503/GREET | 503/MAIL  | 354/DATA_HDR | 503/DATA_HDR  | 503/DATA_BODY | 503/QUIT
            data_end   | 503/CONNECT | 503/GREET | 503/MAIL  | 503/RCPT     | 250/QUIT      | 250/QUIT      | 503/QUIT
            unrecog    | 500/CONNECT | 500/GREET | 500/MAIL  | 500/RCPT     | ---/DATA_HDR  | ---/DATA_BODY | 500/QUIT
            quit       | 503/CONNECT | 503/GREET | 503/MAIL  | 503/RCPT     | 503/DATA_HDR  | 503/DATA_BODY | 250/CONNECT
            blank_line | 503/CONNECT | 503/GREET | 503/MAIL  | 503/RCPT     | ---/DATA_BODY | ---/DATA_BODY | 503/QUIT
            rset       | 250/GREET   | 250/GREET | 250/GREET | 250/GREET    | 250/GREET     | 250/GREET     | 250/GREET
            vrfy       | 252/CONNECT | 252/GREET | 252/MAIL  | 252/RCPT     | 252/DATA_HDR  | 252/DATA_BODY | 252/QUIT
            expn       | 252/CONNECT | 252/GREET | 252/MAIL  | 252/RCPT     | 252/DATA_HDR  | 252/DATA_BODY | 252/QUIT
            help       | 211/CONNECT | 211/GREET | 211/MAIL  | 211/RCPT     | 211/DATA_HDR  | 211/DATA_BODY | 211/QUIT
            noop       | 250/CONNECT | 250/GREET | 250/MAIL  | 250/RCPT     | 250|DATA_HDR  | 250/DATA_BODY | 250/QUIT
            </code>
            </remarks>
        </member>
        <member name="F:nDumbster.smtp.SmtpRequest.action">
            <summary>
            SMTP action received from client. 
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpRequest.state">
            <summary>
            Current state of the SMTP state table. 
            </summary>
        </member>
        <member name="F:nDumbster.smtp.SmtpRequest.request_Params">
            <summary>
            Additional information passed from the client with the SMTP action. 
            </summary>
        </member>
        <member name="M:nDumbster.smtp.SmtpRequest.#ctor(nDumbster.smtp.SmtpActionType,System.String,nDumbster.smtp.SmtpState)">
            <summary> 
            Create a new SMTP client request.
            </summary>
            <param name="actionType">type of action/command</param>
            <param name="request_Params">remainder of command line once command is removed</param>
            <param name="state">current SMTP server state</param>
        </member>
        <member name="M:nDumbster.smtp.SmtpRequest.Execute">
            <summary> 
            Execute the SMTP request returning a response. This method models the state transition table for the SMTP server.
            </summary>
            <returns>Reponse to the request</returns>
        </member>
        <member name="M:nDumbster.smtp.SmtpRequest.CreateRequest(System.String,nDumbster.smtp.SmtpState)">
            <summary>
             Create an SMTP request object given a line of the input stream from the client and the current internal state.
             </summary>
            <param name="s">line of input</param>
            <param name="state">current state</param>
            <returns>A populated SmtpRequest object</returns>
        </member>
        <member name="P:nDumbster.smtp.SmtpRequest.Params">
            <summary>
            Parameters of this request (remainder of command line once the command is removed.
            </summary>
        </member>
    </members>
</doc>
